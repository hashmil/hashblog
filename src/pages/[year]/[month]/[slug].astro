---
import Layout from '../../../components/Layout.astro';
import Header from '../../../components/Header.astro';
import Menu from '../../../components/Menu.vue';
import Navigation from '../../../components/Navigation.astro';
import Share from '../../../components/Share.astro';
import { Image } from 'astro:assets';
import { getCollection } from 'astro:content';

export const prerender = true;

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((post) => {
    const pubDate = new Date(post.data.pubDate);
    const year = pubDate.getFullYear().toString();
    const month = (pubDate.getMonth() + 1).toString().padStart(2, '0');
    
    return {
      params: { 
        year: year,
        month: month,
        slug: post.slug 
      },
      props: post,
    };
  });
}

const post = Astro.props;
const { Content } = await post.render();

// Get all posts for navigation
const allPosts = await getCollection('blog', ({ data }) => {
  return !data.draft;
});

const sortedPosts = allPosts.sort((a, b) => 
  new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
);

// Find current post index and get prev/next
const currentIndex = sortedPosts.findIndex(p => p.slug === post.slug);
const prevPost = currentIndex < sortedPosts.length - 1 ? sortedPosts[currentIndex + 1] : null;
const nextPost = currentIndex > 0 ? sortedPosts[currentIndex - 1] : null;

function formatDate(date: Date) {
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }).format(date);
}

// Calculate reading time (rough estimate: 200 words per minute)
const wordsPerMinute = 200;
const wordCount = post.body.split(/\s+/).length;
const readingTime = Math.ceil(wordCount / wordsPerMinute);

// Generate canonical URL with new format
const pubDate = new Date(post.data.pubDate);
const year = pubDate.getFullYear();
const month = (pubDate.getMonth() + 1).toString().padStart(2, '0');
const canonicalURL = new URL(`/${year}/${month}/${post.slug}`, Astro.site);

// Handle heroImage for social meta and structured data
let heroImageUrl: string | undefined;
if (post.data.heroImage) {
  // For social sharing, use static images from public folder to avoid 404s
  // Extract the filename from the heroImage path and create a static URL
  const imagePath = post.data.heroImage.src;
  const filename = imagePath.split('/').pop()?.split('.')[0]; // Get filename without extension
  
  // Try to use a static version first (for social sharing reliability)
  if (filename) {
    heroImageUrl = new URL(`/images/social-${filename}.png`, Astro.site).toString();
  } else {
    // Fallback to optimized image
    heroImageUrl = new URL(post.data.heroImage.src, Astro.site).toString();
  }
}
---

<Layout 
  title={post.data.title} 
  description={post.data.description} 
  image={heroImageUrl}
  author="Hash Milhan"
  pubDate={post.data.pubDate}
  tags={post.data.tags}
  canonical={canonicalURL.toString()}
>
  <!-- Enhanced SEO meta tags -->
  <Fragment slot="head">
    <!-- Article specific meta tags -->
    <meta property="article:author" content="Hash Milhan" />
    <meta property="article:published_time" content={post.data.pubDate.toISOString()} />
    {post.data.updatedDate && (
      <meta property="article:modified_time" content={post.data.updatedDate.toISOString()} />
    )}
    {post.data.tags && post.data.tags.map((tag: string) => (
      <meta property="article:tag" content={tag} />
    ))}
    
    <!-- Structured data -->
    <script type="application/ld+json" set:html={JSON.stringify({
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": post.data.title,
      "description": post.data.description,
      "image": heroImageUrl ? new URL(heroImageUrl, Astro.site).toString() : undefined,
      "datePublished": post.data.pubDate.toISOString(),
      "dateModified": post.data.updatedDate?.toISOString() || post.data.pubDate.toISOString(),
      "author": {
        "@type": "Person",
        "name": "Hash Milhan"
      },
      "publisher": {
        "@type": "Person",
        "name": "Hash Milhan"
      },
      "url": canonicalURL.toString(),
      "wordCount": wordCount,
      "keywords": post.data.tags?.join(", ") || ""
    })} />
  </Fragment>

  <Header />
  
  <main class="container py-12" transition:name="main-content">
    <article class="max-w-3xl mx-auto" transition:name={`post-preview-${post.slug}`}>
      <!-- Post Header -->
      <header class="mb-12">
        <!-- Breadcrumb -->
        <nav class="mb-8">
          <a 
            href="/"
            class="text-text-muted hover:text-accent transition-colors duration-200 font-accent text-sm"
          >
            ← Back to Blog
          </a>
        </nav>

        <div class="post-meta mb-6" transition:name="post-meta">
          {formatDate(post.data.pubDate)} • {readingTime} min read
        </div>
        
        <h1 class="text-3xl md:text-5xl font-primary text-white mb-8 leading-tight" transition:name={`post-title-${post.slug}`}>
          {post.data.title}
        </h1>
        
        {/* {post.data.heroImage && (
          <div class="mb-12 rounded-lg overflow-hidden" transition:name={`post-hero-${post.slug}`}>
            <Image 
              src={post.data.heroImage} 
              alt={post.data.title}
              class="w-full h-64 md:h-96 object-cover"
              loading="eager"
            />
          </div>
        )} */}
      </header>
      
      <!-- Post Content -->
      <div class="prose-minimal" transition:name={`post-content-${post.slug}`}>
        <Content />
      </div>
      
      <!-- Share Component -->
      <div class="mt-16" transition:name={`post-share-${post.slug}`}>
        <Share 
          title={post.data.title}
          url={canonicalURL.toString()}
          description={post.data.description}
        />
      </div>
      
      <!-- Navigation Component -->
      <Navigation 
        prevPost={prevPost ? { slug: prevPost.slug, title: prevPost.data.title, pubDate: prevPost.data.pubDate } : undefined}
        nextPost={nextPost ? { slug: nextPost.slug, title: nextPost.data.title, pubDate: nextPost.data.pubDate } : undefined}
      />
    </article>
  </main>
  
  <!-- Menu Component -->
  <Menu client:load />
</Layout> 